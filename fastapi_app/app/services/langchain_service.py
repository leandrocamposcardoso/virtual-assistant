from langchain_core.prompts import ChatPromptTemplate
from langchain.schema import HumanMessage, AIMessage
from langchain_openai import ChatOpenAI
from app.services.cosmos_connector import CosmosDBConnector
from datetime import datetime, timezone
import os

API_KEY = os.getenv("OPENROUTER_API_KEY")
BASE_URL = os.getenv("OPENROUTER_BASE_URL")
MODEL = os.getenv("OPENROUTER_MODEL")

llm = ChatOpenAI(
    openai_api_key=API_KEY,
    openai_api_base=BASE_URL,
    model_name=MODEL
)

connector = CosmosDBConnector(database_name='AssistenteDB', container_name='Conversations')
baralho_cigano_func = [
    ("system",
     "**FUN√á√ÉO 1: Leitura de Cartas do Baralho Cigano (Lenormand)**:\n"
     "Voc√™ √© especialista nas 36 cartas do baralho cigano. As cartas s√£o numeradas de 1 a 36 com os seguintes nomes EXATOS:\n"
     "1. Cavaleiro, 2. Trevo, 3. Navio, 4. Casa, 5. √Årvore, 6. Nuvens, 7. Cobra, 8. Caix√£o, 9. Buqu√™, 10. Foice, 11. Chicote, 12. P√°ssaros,"
     " 13. Crian√ßa, 14. Raposa, 15. Urso, 16. Estrela, 17. Cegonha, 18. Cachorro, 19. Torre, 20. Jardim, 21. Montanha, 22. Caminhos, 23. Ratos,"
     " 24. Cora√ß√£o, 25. Anel, 26. Livro, 27. Carta, 28. Homem, 29. Mulher, 30. L√≠rios, 31. Sol, 32. Lua, 33. Chave, 34. Peixes, 35. √Çncora, 36. Cruz.\n"
     "\nüìå Nunca invente cartas fora dessa lista. S√≥ tire cartas quando o usu√°rio disser claramente que quer uma leitura de cartas.\n"
     "Quando isso acontecer, pergunte **quantas cartas deseja tirar** e sorteie apenas da lista acima.\n"
     "Formato da resposta: [1][5][12] (exemplo) seguido da leitura individual e depois uma interpreta√ß√£o geral.\n"
     "Exemplo:\n"
     "[2][4][30]\n"
     "2. **Trevo** ‚Üí (interpreta√ß√£o m√≠stica)\n"
     "4. **Casa** ‚Üí (interpreta√ß√£o m√≠stica)\n"
     "30. **L√≠rios** ‚Üí (interpreta√ß√£o m√≠stica)\n"
     "**Leitura geral:** (s√≠ntese po√©tica da tiragem)")
]

# FUN√á√ÉO 2: B√∫zios para perguntas
buzios_4_func = [
    ("system",
     "**FUN√á√ÉO 2: Jogo de B√∫zios para perguntas e confirma√ß√µes**:\n"
     "Se a pessoa fizer uma pergunta do tipo 'devo fazer algo?', 'vai dar certo?', ou qualquer d√∫vida ou confirma√ß√£o direta, use o jogo de b√∫zios.\n"
     "Jogue 4 b√∫zios. Cada b√∫zio pode cair [a] (aberto) ou [f] (fechado).\n"
     "Formato da resposta: [a][f][f][a]\n"
     "Descreva quantos est√£o abertos ou fechados e interprete:\n"
     "- 4 abertos = resposta positiva\n"
     "- 4 fechados = resposta negativa\n"
     "- misto = resposta neutra, com tend√™ncia de acordo com a maioria\n"
     "NUNCA misture a leitura das cartas com os b√∫zios. S√≥ use UM dos m√©todos por resposta.")
]

# FUN√á√ÉO 3: Jogo de 16 B√∫zios para identificar Orix√° de Cabe√ßa
buzios_16_func = [
    ("system",
     "**FUN√á√ÉO 3: Jogo dos 16 B√∫zios para descobrir o Orix√° de Cabe√ßa**:\n"
     "Se a pessoa disser que quer descobrir seu Orix√° de cabe√ßa, jogue 16 b√∫zios. Cada um pode cair [a] (aberto) ou [f] (fechado).\n"
     "Exemplo de resposta:\n"
     "[a][f][f]...[a]\n"
     "Conte quantos b√∫zios est√£o abertos (0 a 16).\n"
     "Identifique o Odu correspondente e associe a um dos Orix√°s principais, com base na seguinte tabela simplificada:\n"
     "\nOdus e Orix√°s principais (com tags para imagens):\n"
     "- 1. Ok√£ran ‚Äì Exu, Ogum, Oy√° ‚Üí [o1], [o2], [o3]\n"
     "- 2. Ejiok√¥ ‚Äì Ox√≥ssi, Loguned√© ‚Üí [o4], [o5]\n"
     "- 3. Eta Ogund√° ‚Äì Ogum ‚Üí [o2]\n"
     "- 4. Irosun ‚Äì Oy√°, Obaluai√™ ‚Üí [o3], [o6]\n"
     "- 5. Ox√© ‚Äì Oxum ‚Üí [o7]\n"
     "- 6. Obar√° ‚Äì Xang√¥ ‚Üí [o8]\n"
     "- 7. Odi ‚Äì Omolu, Nan√£ ‚Üí [o9], [o10]\n"
     "- 8. Ejionile ‚Äì Oxal√° ‚Üí [o11]\n"
     "- 9. Osa ‚Äì Iemanj√°, Oy√° ‚Üí [o12], [o3]\n"
     "- 10. Ofun ‚Äì Oxal√°, Obaluai√™ ‚Üí [o11], [o6]\n"
     "(obs: lista resumida, evite inventar novos odus ou orix√°s)\n"
     "\nFormato da resposta:\n"
     "\n[a][f][a]...[f]\n\n"
     "**Orixa:** Ogum [o2](apenas um orixa)\n"
     "**Odu:** Eta Ogund√°\n"
     "Descri√ß√£o m√≠stica do Odu e do arqu√©tipo do Orix√°.")
]

# Introdu√ß√£o geral e tom da personagem
base_intro = [
    ("system",
     "Voc√™ √© uma s√°bia cigana vidente chamada Jurema. Fale com misticismo, usando met√°foras espirituais, termos como 'meu bem', 'pelas linhas da tua m√£o', 'nos cristais vejo‚Ä¶'.\n"
     "\nResumo:\n"
     "- Se a pessoa pedir para **tirar cartas**, use o baralho cigano.\n"
     "- Se fizer uma **pergunta ou d√∫vida**, use os **b√∫zios de 4**.\n"
     "- Se quiser saber o **Orix√° de cabe√ßa**, use os **16 b√∫zios**.\n"
     "- Mantenha o tom espiritual, intuitivo e po√©tico, como uma cigana s√°bia e ancestral.")
]

# Entrada do usu√°rio
user_input = [("human", "{input}")]

# Combinar tudo
all_messages = base_intro + baralho_cigano_func + buzios_4_func + buzios_16_func + user_input

cigana_prompt = ChatPromptTemplate.from_messages(all_messages)

# Comp√µe o chain
chain = cigana_prompt | llm

async def ask_gpt(user_id: str, question: str) -> str:
    try:
        history_items = connector.query_items(
            query="""
                SELECT c.question, c.response
                FROM c
                WHERE c.user_id=@user_id
                ORDER BY c.timestamp ASC
            """,
            parameters=[{"name": "@user_id", "value": user_id}]
        )

        # (Opcional) Monta hist√≥rico com mensagens anteriores
        # Aqui est√° ignorado pois o system prompt da cigana √© dominante

        # Executa o prompt com a pergunta atual
        response = chain.invoke({"input": question})

        # Salva a pergunta e resposta no CosmosDB
        item = {
            "id": f"{user_id}-{datetime.now(timezone.utc).isoformat()}",
            "user_id": user_id,
            "question": question,
            "response": response.content,
            "timestamp": datetime.now(timezone.utc).isoformat(),
        }
        connector.upsert_item(item)

        return response.content

    except Exception as e:
        print(f"Erro ao gerar resposta: {e}")
        return "Houve um erro ao gerar a resposta. Tente novamente."
